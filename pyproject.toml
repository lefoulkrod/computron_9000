[project]
name = "computron-9000"
version = "0.1.0"
description = "A modern, extensible AI assistant platform with a responsive chat UI and Python backend."
requires-python = ">=3.12"
dependencies = [
    "litellm",
    "aiohttp",
    "pydantic",
    "playwright==1.52.0",
    "beautifulsoup4",
    "podman==5.4.0.1",
    "ollama>=0.5.1",
    "cachetools>=5.5.2",
    "python-dotenv>=1.1.0",
    "asyncpraw>=7.8.1",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0,<8.0.0",
    "pytest-asyncio",
    "pytest-watch"
]
dev = [
    "ruff",
    "mypy",
    "types-cachetools",
    "types-PyYAML"
]

[tool.uv]
# uv-specific settings can go here

[tool.ruff]
target-version = "py312"
line-length = 100
extend-exclude = ["tests/*"]

[tool.ruff.per-file-ignores]
# Allow prints in REPL helper scripts under repls/
"repls/*" = ["T201"]

[tool.ruff.lint]
select = [
    "ALL",
    "D",
]
extend-select = ["I"]
ignore = [
    # Ignore all complexity rules
    "C90",  # McCabe complexity
    "C901",  # Function is too complex
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments
    "PLR0915",  # Too many statements
    "PLR1702",  # Too many nested blocks
    "COM812",   # Missing trailing comma in Python 3.6+
    "TD003",    # No issue link TODO
    "FIX002",   # Consider resolving this issue
    "TRY301",   # Abstract raise to inner function - globally ignored per project preference
]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google-style docstrings

[tool.mypy]
python_version = "3.12"                 # Target Python version for type checking

# 🔒 Core strictness
disallow_untyped_defs = true            # All functions must have type hints
disallow_incomplete_defs = true         # No partially typed signatures (e.g., missing return type)
check_untyped_defs = true               # Still type-check bodies of untyped functions
no_implicit_optional = true             # Require explicit Optional[...] instead of implicit None
strict_equality = true                  # Disallow comparisons between incompatible types

# ⚠️ Warnings for hygiene
warn_return_any = true                  # Warn if Any sneaks into a return type
warn_unused_configs = true              # Catch typos in this config
warn_unused_ignores = true              # Warn on unused `# type: ignore` comments
warn_redundant_casts = true             # Point out casts that don’t change type
warn_no_return = true                   # Warn when a function doesn’t return on all paths
warn_unreachable = true                 # Warn about code that can never be executed

# 📦 Imports & layout
ignore_missing_imports = false          # Force you to install/declare stubs, don’t silently allow Any
namespace_packages = true               # Support flat-layout multi-package repos
explicit_package_bases = true           # Force explicit top-level package roots

# 🧹 Developer experience
show_error_codes = true                 # Show mypy error codes (useful with Ruff autofixes)
allow_redefinition = false              # Prevent accidental variable reassign in same scope
pretty = true                           # Nicer formatted errors
exclude = "^tests/"                     # Skip type-checking tests (can be relaxed later)

# 🔌 Plugins
plugins = ["pydantic.mypy"]             # Enable Pydantic plugin for proper model typing

[tool.pydantic-mypy]
warn_untyped_fields = true              # Force fields to be annotated
init_typed = true                       # Enforce correct __init__ signatures
init_forbid_extra = true                # Respect ConfigDict(extra="forbid")

[[tool.mypy.overrides]]
module = ["asyncpraw.*"]
ignore_missing_imports = true           # AsyncPRAW stubs aren’t complete → ignore them


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]  
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests", 
    "slow: marks tests as slow running",
]
asyncio_mode = "auto"


[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
# Explicitly include our flat-layout top-level packages
include = [
    "agents*",
    "config*",
    "models*",
    "repls*",
    "server*",
    "tools*",
    "utils*",
]
exclude = [
    "tests*",
]
