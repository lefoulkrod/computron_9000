[project]
name = "computron-9000"
version = "0.1.0"
description = "A modern, extensible AI assistant platform with a responsive chat UI and Python backend."
requires-python = ">=3.12"
dependencies = [
    "litellm",
    "aiohttp",
    "pydantic",
    "playwright",
    "playwright==1.52.0",
    "setuptools>=65.0.0",
    "beautifulsoup4",
    "podman==5.4.0.1",
    "ollama>=0.5.1",
    "cachetools>=5.5.2",
    "python-dotenv>=1.1.0",
    "asyncpraw>=7.8.1",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0,<8.0.0",
    "pytest-asyncio",
    "pytest-watch"
]
dev = [
    "ruff",
    "mypy",
    "types-cachetools",
    "types-PyYAML"
]

[tool.uv]
# uv-specific settings can go here

[tool.ruff]
target-version = "py312"
line-length = 100
extend-exclude = ["tests/*"]

[tool.ruff.lint]
select = [
    "ALL",
    "D",
]
extend-select = ["I"]
ignore = [
    # Ignore all complexity rules
    "C90",  # McCabe complexity
    "C901",  # Function is too complex
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments
    "PLR0915",  # Too many statements
    "PLR1702",  # Too many nested blocks
    "COM812"    # Missing trailing comma in Python 3.6+
]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google-style docstrings

[tool.mypy]
python_version = "3.12"                         # Target Python version for type checking
warn_return_any = true                     # Warn when a non-Any return is inferred as Any
warn_unused_configs = true                # Alert on unused config flags or overrides (catch typos)
disallow_untyped_defs = true              # Prevent any function defs without type annotations
disallow_incomplete_defs = true           # Forbid partially typed defs (e.g., missing return/param)
check_untyped_defs = true                 # Type-check bodies of even untyped functions
disallow_untyped_decorators = true        # Disallow using untyped decorators on typed functions
no_implicit_optional = true               # Donâ€™t treat default None as Optional unless explicit
warn_redundant_casts = true               # Warn for pointless casts to same type
warn_unused_ignores = true                # Warn about unnecessary `# type: ignore` comments
warn_no_return = true                     # Warn when a non-None function might not return on all paths
warn_unreachable = true                   # Catch code that can never be reached
strict_equality = true                    # Enforce strict comparison (e.g., no comparing incompatible types)
show_error_codes = true                   # Display mypy error codes (e.g., `[no-any-return]`)

# ðŸŽ¯ Extra strict flags common in large open-source/enterprise projects:
disallow_any_unimported = true            # Prevent silent Any from missing imports; encourages stubs
disallow_any_generics = true              # Require explicit type parameters for generics (e.g., list[int])
disallow_untyped_calls = true             # Disallow calling untyped functions from typed code
no_implicit_reexport = true               # Disallow implicit star re-exports (e.g., via `from module import *`)

[[tool.mypy.overrides]]
module = "tests/*"
disallow_untyped_defs = false             # Allow untyped defs in tests for flexibility
no_implicit_reexport = false              # Allow tests to import from internal modules

[[tool.mypy.overrides]]
module = ["asyncpraw.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]  
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests", 
    "slow: marks tests as slow running",
]
asyncio_mode = "auto"
